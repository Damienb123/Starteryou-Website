name: Deploy to AWS EC2


on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify SSH Tunnel
        env:
          DB_SSH_KEY: ${{ secrets.DB_EC2_SSH_KEY }}
          DB_EC2_USER: ${{ secrets.DB_EC2_USER }}
          DB_EC2_HOST: ${{ secrets.DB_EC2_HOST }}
        run: |
          # Ensure the .ssh directory exists
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Add EC2 host to known hosts to avoid host verification failure
          ssh-keyscan -H $DB_EC2_HOST >> ~/.ssh/known_hosts

          # Save the private key for SSH
          echo "$DB_SSH_KEY" > ~/.ssh/db_key.pem
          chmod 600 ~/.ssh/db_key.pem

          # Verify the SSH tunnel
          ssh -i ~/.ssh/db_key.pem $DB_EC2_USER@$DB_EC2_HOST "echo 'SSH Tunnel Verified!'"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7  # Use a stable version of the ssh-action
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.DB_EC2_SSH_KEY }}
          script: |
            set -e
            # Navigate to project directory or clone if it doesn't exist
            if [ ! -d "/home/ec2-user/Starteryou-Website/Starteryou" ]; then
              mkdir -p /home/ec2-user/Starteryou-Website
              cd /home/ec2-user/Starteryou-Website
              git clone https://github.com/starteryouInc/Starteryou-Website.git -b develop Starteryou
            else
              log "Pulling latest changes..."
              cd "$REPO_DIR"
              git fetch origin develop
              git reset --hard origin/develop
            fi

            log "Creating .env file..."
            rm -f "$ENV_FILE"
            touch "$ENV_FILE"
            chmod 600 "$ENV_FILE"

            cat > "$ENV_FILE" << EOF
            NODE_ENV=production
            MONGO_USER=${{ secrets.MONGO_USER }}
            MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
            MONGO_HOST=localhost # Access via SSH tunnel
            MONGO_PORT=27017
            MONGO_DB=${{ secrets.MONGO_DB }}
            MONGO_AUTH_SOURCE=${{ secrets.MONGO_AUTH_SOURCE }}
            MONGO_TLS=true
            MONGO_TLS_CA=/etc/ssl/mongodb/ca.crt
            MONGO_TLS_CERT=/etc/ssl/mongodb/server.pem
            MONGO_APP_NAME=${{ secrets.MONGO_APP_NAME }}
            EOF

            log "Restarting Docker..."
            sudo systemctl start docker || sudo systemctl restart docker

            log "Cleaning up old Docker resources..."
            docker-compose down --volumes --remove-orphans
            docker system prune -af --volumes
            docker-compose up -d --build
