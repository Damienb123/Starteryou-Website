name: Deploy to AWS EC2

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Configure SSH
        run: |
          touch ~/.ssh/config
          echo "Host *" >> ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Fetch SSL certificates from DB server
        run: |
          mkdir -p ./mongodb-certs
          scp ${{ secrets.EC2_USER }}@${{ secrets.DB_EC2_HOST }}:/etc/ssl/mongodb/ca.crt ./mongodb-certs/
          scp ${{ secrets.EC2_USER }}@${{ secrets.DB_EC2_HOST }}:/etc/ssl/mongodb/server.pem ./mongodb-certs/

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            # Navigate to project directory or clone if it doesn't exist
            if [ ! -d "/home/ec2-user/Starteryou-Website/Starteryou" ]; then
              mkdir -p /home/ec2-user/Starteryou-Website
              cd /home/ec2-user/Starteryou-Website
              git clone https://github.com/starteryouInc/Starteryou-Website.git -b develop Starteryou
            else
              cd /home/ec2-user/Starteryou-Website/Starteryou
              git pull origin develop --ff-only || git pull origin develop --rebase
            fi

            # Ensure Docker is running
            sudo systemctl start docker || sudo systemctl restart docker

            # Clean up old containers and rebuild
            docker-compose down --volumes --remove-orphans
            docker system prune -af --volumes
            docker-compose up -d --build

            # Verify running containers
            docker ps

            # Check logs for backend and frontend
            docker logs starteryou-backend
            docker logs starteryou-frontend
