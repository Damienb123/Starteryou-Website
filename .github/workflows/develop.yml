name: Deploy to AWS EC2

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add SSL Certificates via Secrets
        env:
          DB_SSH_KEY: ${{ secrets.DB_EC2_SSH_KEY }}
          DB_EC2_USER: ${{ secrets.DB_EC2_USER }}
          DB_EC2_HOST: ${{ secrets.DB_EC2_HOST }}
          MONGO_TLS_CA: ${{ secrets.MONGO_TLS_CA }}
          MONGO_TLS_CERT: ${{ secrets.MONGO_TLS_CERT }}
        run: |
          # Ensure the .ssh directory exists
          mkdir -p ~/.ssh
          # Add DB server to known hosts to avoid host verification failure
          ssh-keyscan -H $DB_EC2_HOST >> ~/.ssh/known_hosts
          # Create the folder for storing SSL certificates
          mkdir -p ./mongodb-certs
          # Create a temporary file for the SSH private key and set its permissions
          echo "$DB_SSH_KEY" > ~/db_key.pem
          chmod 600 ~/db_key.pem
          # Temporarily change permissions on the DB server to allow access to the files
          echo "Changing permissions on DB server for certificate files..."
          ssh -i ~/db_key.pem $DB_EC2_USER@$DB_EC2_HOST "sudo chmod 644 /etc/ssl/mongodb/ca.crt /etc/ssl/mongodb/server.pem"
          # Fetch the SSL certificates from the DB server
          echo "Copying SSL certificates..."
          scp -i ~/db_key.pem $DB_EC2_USER@$DB_EC2_HOST:/etc/ssl/mongodb/ca.crt ./mongodb-certs/
          scp -i ~/db_key.pem $DB_EC2_USER@$DB_EC2_HOST:/etc/ssl/mongodb/server.pem ./mongodb-certs/
          # Revert the permissions on the DB server after copying the certificates
          echo "Reverting permissions on DB server..."
          ssh -i ~/db_key.pem $DB_EC2_USER@$DB_EC2_HOST "sudo chmod 600 /etc/ssl/mongodb/server.pem /etc/ssl/mongodb/ca.crt"
          echo "$MONGO_TLS_CA" > ./mongodb-certs/ca.crt
          echo "$MONGO_TLS_CERT" > ./mongodb-certs/server.pem

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            #!/bin/bash
            set -e
            set -o pipefail

            log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"; }
            handle_error() { log "Error occurred on line $1"; exit 1; }
            trap 'handle_error $LINENO' ERR

            PROJECT_ROOT="/home/ec2-user/Starteryou-Website"
            REPO_DIR="${PROJECT_ROOT}/Starteryou"
            ENV_FILE="${REPO_DIR}/.env"

            log "Ensuring project root exists..."
            mkdir -p "$PROJECT_ROOT"
            cd "$PROJECT_ROOT"

            log "Managing repository..."
            if [ ! -d "$REPO_DIR" ]; then
              log "Cloning repository..."
              git clone https://github.com/starteryouInc/Starteryou-Website.git -b develop Starteryou
            else
              log "Pulling latest changes..."
              cd "$REPO_DIR"
              git fetch origin develop
              git reset --hard origin/develop
            fi

            log "Copying SSL certificates..."
            mkdir -p "$REPO_DIR/keys/mongodb-ssl"
            cp -r ./mongodb-certs/* "$REPO_DIR/keys/mongodb-ssl/"
            chmod 644 "$REPO_DIR/keys/mongodb-ssl/"*

            log "Creating .env file..."
            rm -f "$ENV_FILE"
            touch "$ENV_FILE"
            chmod 600 "$ENV_FILE"

            cat > "$ENV_FILE" << EOF
            NODE_ENV=production
            MONGO_USER=${{ secrets.MONGO_USER }}
            MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
            MONGO_HOST=${{ secrets.MONGO_HOST }}
            MONGO_PORT=${{ secrets.MONGO_PORT }}
            MONGO_DB=${{ secrets.MONGO_DB }}
            MONGO_AUTH_SOURCE=${{ secrets.MONGO_AUTH_SOURCE }}
            MONGO_TLS=true
            MONGO_TLS_CA=${{ secrets.MONGO_TLS_CA }}
            MONGO_TLS_CERT=${{ secrets.MONGO_TLS_CERT }}
            MONGO_APP_NAME=${{ secrets.MONGO_APP_NAME }}
            EOF

            log "Restarting Docker..."
            sudo systemctl start docker || sudo systemctl restart docker

            log "Cleaning up old Docker resources..."
            docker-compose down --volumes --remove-orphans
            docker system prune -af --volumes

            log "Building and starting Docker containers..."
            docker-compose up -d --build

            log "Verifying containers..."
            docker ps

            log "Deployment completed successfully!"
