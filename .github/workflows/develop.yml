name: Deploy to AWS EC2

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS credentials
        run: |
          echo "Exporting AWS credentials..."
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_REGION="${{ secrets.AWS_REGION }}"

          # Verify AWS credentials
          echo "AWS_ACCESS_KEY_ID is set to: $AWS_ACCESS_KEY_ID"
          echo "AWS_REGION is set to: $AWS_REGION"

      # Step 3: Verify SSH Tunnel to Database
      - name: Verify SSH Tunnel to Database
        run: |
          # Ensure the .ssh directory exists
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Add the database server to known hosts
          ssh-keyscan -H "${{ secrets.DB_EC2_HOST }}" >> ~/.ssh/known_hosts

          # Save the private key for SSH
          echo "${{ secrets.DB_EC2_SSH_KEY }}" > ~/.ssh/db_key.pem
          chmod 600 ~/.ssh/db_key.pem

          # Verify the SSH tunnel to the database server
          ssh -i ~/.ssh/db_key.pem ${{ secrets.DB_EC2_USER }}@${{ secrets.DB_EC2_HOST }} "echo 'Database Server SSH Verified!'"

      # Step 4: Deploy Application to EC2
      - name: Deploy Application to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            #!/bin/bash
            set -e

            # Define the log function
            log() {
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"
            }

            log "Exporting environment variables for deployment..."
            export DB_SSH_KEY="${{ secrets.DB_SSH_KEY }}"
            export DB_EC2_HOST="${{ secrets.DB_EC2_HOST }}"
            export DB_EC2_USER="${{ secrets.DB_EC2_USER }}"
            export NODE_ENV=production
            export MONGO_USER="${{ secrets.MONGO_USER }}"
            export MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}"
            export MONGO_HOST=localhost
            export MONGO_PORT=27017
            export MONGO_DB="${{ secrets.MONGO_DB }}"
            export MONGO_AUTH_SOURCE="${{ secrets.MONGO_AUTH_SOURCE }}"
            export MONGO_TLS=true
            export MONGO_TLS_CA=/etc/ssl/mongodb/ca.crt
            export MONGO_TLS_CERT=/etc/ssl/mongodb/server.pem
            export MONGO_APP_NAME="${{ secrets.MONGO_APP_NAME }}"

            log "Ensuring Git is installed..."
            if ! command -v git &> /dev/null; then
              sudo yum update -y || sudo apt-get update -y
              sudo yum install -y git || sudo apt-get install -y git
            fi

            # Set project and repository directories
            PROJECT_ROOT="/home/ec2-user/Starteryou-Website"
            REPO_DIR="${PROJECT_ROOT}/Starteryou"

            # Navigate to project directory or clone if it doesn't exist
            if [ ! -d "$REPO_DIR" ]; then
              log "Cloning repository..."
              mkdir -p "$PROJECT_ROOT"
              cd "$PROJECT_ROOT"
              git clone https://github.com/***Inc/Starteryou-Website.git -b develop Starteryou
            else
              log "Pulling latest changes..."
              cd "$REPO_DIR"
              git fetch origin develop
              git reset --hard origin/develop
            fi

            log "Restarting Docker..."
            sudo systemctl start docker || sudo systemctl restart docker

            log "Cleaning up old Docker resources..."
            docker-compose down --volumes --remove-orphans
            docker system prune -af --volumes

            log "Building and starting Docker containers..."
            docker-compose up -d --build

            log "Deployment completed successfully!"
