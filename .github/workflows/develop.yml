name: Deploy to AWS EC2

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Export Secrets to Environment
      - name: Export Secrets
        run: |
          echo "Exporting secrets..."
          echo "DB_EC2_HOST=${{ secrets.DB_EC2_HOST }}" >> $GITHUB_ENV
          echo "DB_EC2_USER=${{ secrets.DB_EC2_USER }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
          echo "MONGO_USER=${{ secrets.MONGO_USER }}" >> $GITHUB_ENV
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> $GITHUB_ENV
          echo "MONGO_DB=${{ secrets.MONGO_DB }}" >> $GITHUB_ENV
          echo "MONGO_AUTH_SOURCE=${{ secrets.MONGO_AUTH_SOURCE }}" >> $GITHUB_ENV
          echo "MONGO_APP_NAME=${{ secrets.MONGO_APP_NAME }}" >> $GITHUB_ENV

      # Step 3: Write SSH Key
      - name: Write SSH Key
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.DB_EC2_SSH_KEY }}" > ~/.ssh/db_key.pem
          chmod 600 ~/.ssh/db_key.pem

      # Step 4: Set Up SSH Tunnel
      - name: Set Up SSH Tunnel
        run: |
          ssh-keyscan -H "${DB_EC2_HOST}" >> ~/.ssh/known_hosts
          ssh -N -L 27017:localhost:27017 ${DB_EC2_USER}@${DB_EC2_HOST} -i ~/.ssh/db_key.pem &

      # Step 5: Verify SSH Tunnel
      - name: Verify SSH Tunnel
        run: |
          echo "Verifying SSH Tunnel..."
          if nc -z localhost 27017; then
            echo "SSH Tunnel Verified!"
          else
            echo "Failed to verify SSH Tunnel."
            exit 1
          fi

      # Step 6: Deploy to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.DB_EC2_SSH_KEY }}
          script: |
            #!/bin/bash
            set -e
            set -o pipefail

            log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"; }
            handle_error() { log "Error occurred on line $1"; exit 1; }
            trap 'handle_error $LINENO' ERR

            log "Starting deployment..."

            PROJECT_ROOT="/home/ec2-user/Starteryou-Website"
            REPO_DIR="${PROJECT_ROOT}/Starteryou"
            ENV_FILE="${REPO_DIR}/.env"

            log "Ensuring project root exists..."
            mkdir -p "$PROJECT_ROOT"
            cd "$PROJECT_ROOT"

            log "Managing repository..."
            if [ ! -d "$REPO_DIR" ]; then
              log "Cloning repository..."
              git clone https://github.com/starteryouInc/Starteryou-Website.git -b develop Starteryou
            else
              log "Pulling latest changes..."
              cd "$REPO_DIR"
              git fetch origin develop
              git reset --hard origin/develop
            fi

            log "Creating .env file..."
            rm -f "$ENV_FILE"
            touch "$ENV_FILE"
            chmod 600 "$ENV_FILE"

            cat > "$ENV_FILE" << EOF
            NODE_ENV=production
            MONGO_USER=${MONGO_USER}
            MONGO_PASSWORD=${MONGO_PASSWORD}
            MONGO_HOST=localhost
            MONGO_PORT=27017
            MONGO_DB=${MONGO_DB}
            MONGO_AUTH_SOURCE=${MONGO_AUTH_SOURCE}
            MONGO_APP_NAME=${MONGO_APP_NAME}
            EOF

            log "Restarting Docker..."
            sudo systemctl start docker || sudo systemctl restart docker

            log "Cleaning up old Docker resources..."
            docker-compose down --volumes --remove-orphans
            docker system prune -af --volumes

            log "Building and starting Docker containers..."
            docker-compose up -d --build

            log "Verifying containers..."
            docker ps

            log "Deployment completed successfully!"
        env:
          MONGO_USER: ${{ secrets.MONGO_USER }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          MONGO_DB: ${{ secrets.MONGO_DB }}
          MONGO_AUTH_SOURCE: ${{ secrets.MONGO_AUTH_SOURCE }}
          MONGO_APP_NAME: ${{ secrets.MONGO_APP_NAME }}
