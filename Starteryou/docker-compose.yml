version: "3.8"

services:
  sshtunnel:
    image: alpine:latest
    container_name: sshtunnel
    entrypoint: >
      sh -c "
      apk add --no-cache openssh &&
      chmod 600 /root/db_key.pem &&
      ssh-keyscan -H $DB_EC2_HOST >> /etc/ssh/ssh_known_hosts &&
      ssh -N -L 27017:localhost:27017 $DB_EC2_USER@$DB_EC2_HOST -i /root/db_key.pem"
    environment:
      DB_EC2_HOST: ${DB_EC2_HOST:-default-db-host}
      DB_EC2_USER: ${DB_EC2_USER:-default-db-user}
    volumes:
      - ./db_key.pem:/root/db_key.pem:ro
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "pgrep", "ssh"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  cert-fetcher:
    image: alpine:latest
    container_name: cert-fetcher
    entrypoint: >
      sh -c "
      apk add --no-cache openssh &&
      mkdir -p /certificates &&
      ssh-keyscan -H $DB_EC2_HOST >> /etc/ssh/ssh_known_hosts &&
      while true; do
        scp -i /root/db_key.pem $DB_EC2_USER@$DB_EC2_HOST:/etc/ssl/mongodb/ca.crt /certificates/ca.crt &&
        scp -i /root/db_key.pem $DB_EC2_USER@$DB_EC2_HOST:/etc/ssl/mongodb/server.pem /certificates/server.pem &&
        echo 'Certificates fetched at $(date)';
        sleep 86400;
      done"
    environment:
      DB_EC2_HOST: ${DB_EC2_HOST:-default-db-host}
      DB_EC2_USER: ${DB_EC2_USER:-default-db-user}
    volumes:
      - cert-vol:/certificates
      - ./db_key.pem:/root/db_key.pem:ro
    networks:
      - backend-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: starteryou-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 3000
      FRONTEND_URL: https://starteryou.com
      VITE_BACKEND_URL: https://starteryou.com
      MONGO_TLS: "true"
      MONGO_HOST: localhost
      MONGO_PORT: 27017
      MONGO_TLS_CA: /certificates/ca.crt
      MONGO_TLS_CERT: /certificates/server.pem
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - cert-vol:/certificates:ro
      - ./backend:/usr/src/app
      - ./backend/uploads:/usr/src/app/uploads
    networks:
      - backend-network
      - frontend-network
    depends_on:
      - sshtunnel
      - cert-fetcher
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: starteryou-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      BACKEND_URL: https://starteryou.com
    depends_on:
      - backend
    networks:
      - frontend-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
    - /etc/letsencrypt/live/starteryou.com:/etc/letsencrypt/live/starteryou.com:ro

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  cert-vol:
